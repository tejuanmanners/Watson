version: 6
meta:
  name: Lenovo Sales Agent
  description: >-
    Internal sales agent for Lenovo. Try out the following questions:


    - [what is the difference in BA and
    FOE?](ask:what%20is%20the%20difference%20in%20BA%20and%20FOE%3F)

    - [when I do a sizing, does it reserve
    stock?](ask:when%20I%20do%20a%20sizing%2C%20does%20it%20reserve%20stock%3F)

    - [what are the different options I have to upgrade the
    shipment?](ask:what%20are%20the%20different%20options%20I%20have%20to%20upgrade%20the%20shipment%3F)

    - [where are our manufacturing
    locations?](ask:where%20are%20our%20manufacturing%20locations%3F)

    - [can we ship from Mexico to worldwide
    locations?](ask:can%20we%20ship%20from%20Mexico%20to%20worldwide%20locations%3F)

    - [can we bill to a customer and delivery it to a different
    address?](ask:can%20we%20bill%20to%20a%20customer%20and%20delivery%20it%20to%20a%20different%20address%3F)


    Example of how Watson can respond to the same question asked in different
    ways:


    - [what is the difference in BA and
    FOE?](ask:what%20is%20the%20difference%20in%20BA%20and%20FOE%3F)

    - [distinguish BA and FOE](ask:distinguish%20BA%20and%20FOE)

    - [FOE vs. BA?](ask:FOE%20vs.%20BA%3F)


    We can configure a default fallback in the case the user asks a question
    which cannot be understood by our system:


    - [who will win the Warriors game
    tonight?](ask:who%20will%20win%20the%20Warriors%20game%20tonight%3F)
  bundler: webpack
  protected: true
secrets:
  - name: tenantId
  - name: customAdvisorUrl
  - name: clientSecret
  - name: uniqueId
  - name: url
  - name: collection
  - name: apikey
  - name: enviornment
concepts:
  - name: 'lns:DefaultHelpLink'
    ontology:
      subClassOf: ':Showable'
  - name: 'lns:Document'
    ontology:
      subClassOf: ':Showable'
  - name: 'lns:StaticDocumentation'
    ontology:
      subClassOf: ':Message'
  - name: ':Message'
  - name: ':Showable'
  - name: ':All'
  - name: ':Relation'
  - name: 'flod:ManufacturingOrderId'
  - name: 'flod:ManufacturingOrders'
    ontology:
      isListOf: 'flod:ManufacturingOrder'
      subClassOf: ':Showable'
      isSpellAs: manufacturing Orders
  - name: 'flod:ManufacturingOrder'
    ontology:
      subClassOf: ':Showable'
      isSpellAs: manufacturing Order
  - name: 'flod:Status'
    ontology:
      subClassOf: ':Showable'
  - name: 'flod:MOs'
patterns: >-
  - show me the [manufacture order](flod:ManufacturingOrder)

  - show me all [manufacture orders|manufacturing
  orders](flod:ManufacturingOrders)

  - show me [manufacturing order](flod:ManufacturingOrder)

  - show me the [status](flod:Status) [of](:Relation) [manfacturing
  order](flod:ManufacturingOrder)

  - [`REGEX [a-zA-Z0-9]{12}~[a-zA-Z0-9]{7,}`](flod:ManufacturingOrderId)
ontobot: ''
actions:
  - name: 'flod:GetManufacturingOrderStatus'
    signature: >-
      flod:ManufacturingOrder (flod:Status (flod:ManufacturingOrderId (optional
      :Relation))) -> data flod:Status
    kind: 'nodejs:10'
    code: |-
      const {NLToken, Params, Result} = require('eba')
      const advisor = require('./lenovo-client.js')
      module.exports.main = async (params) => {
        // unwrap actions params
        const p = new Params(params)
        const orderId = await p.get('flod:ManufacturingOrderId')
        const code = orderId.code || orderId
        console.log(orderId)
        const question = await p.get('@question')
        
        // get advisor response data
        const command = `proc_manufacture_order_status(moNumber:"${code}")`
        const response = await advisor.getAdvisorResponse(params.secrets, params.storage, question, command)
        
        // construct NLG meta
        const meta = new NLToken('flod:Status')
          .addProperty('flod:For', new NLToken('flod:ManufacturingOrder')
            .addProperty(':WithId', new NLToken('nlg:PlainText', code)))
        
        // return result
        return new Result()
          .setMeta('flod:Status', meta)
          .setData('flod:Status', response)
      }
  - name: 'flod:GetManufacturingOrders'
    signature: 'flod:ManufacturingOrders (optional :All) -> data flod:ManufacturingOrders'
    kind: 'nodejs:10'
    code: |-
      const {NLToken, Params, Result} = require('eba')
      module.exports.main = async (params) => {
        const p = new Params(params)
        const question = p.input['@question'].data
        
        // return extendable lazy data wrapper
        const orders = p.makeLazyData({method: 'getManufacturingOrders', question: question})
        return new Result()
          .setData('flod:ManufacturingOrders', orders)
          .setMeta('flod:ManufacturingOrders', new NLToken('flod:ManufacturingOrders'))
      }
endpoints:
  - name: '@force'
    kind: 'nodejs:10'
    code: |-
      const {getAdvisorResponse, createCommand} = require('./lenovo-client.js')
      const {GenericLazyExecutor, Result} = require("eba")
      const _ = require("lodash")

      const logThenReturn = async (f) => {
        const startTime = Date.now()
        const result = await f()
        console.log(`time to execute getAdvisorResponse: ${Date.now() - startTime}`)
        return result
      }

      class Executor extends GenericLazyExecutor {
        constructor(params) {
          super(params)
          this.secrets = params.secrets
          this.storage = params.storage
        }
        
        load(params) {
          console.log("forceData: ", params)
          const methods = { 
            'getManufacturingOrders': this.getManufacturingOrders
          }
          return (methods[params.method]) ?
            methods[params.method].call(this, params) : null
        }
        
        async getManufacturingOrders(source) {
          const props = _.omit(source, ['question', 'method'])
          const command = createCommand(props, 'manufacture')
          console.log(command)
          console.log(source.question)
          return await logThenReturn(async () => await getAdvisorResponse(this.secrets, this.storage, source.question, command))
        }
        
      }
      module.exports.main = async (params) => {
        const realData = await new Executor(params).force(params.input);
        return new Result(realData)
      }
  - name: '@react'
    kind: 'nodejs:10'
    code: "module.exports.main = (params) => {\r\n  /* places contextual node into information space.\r\n    Note: data child added as unused concepts are removed from information space by design */\r\n  if (params.input.repr.name === 'start') {\r\n    return {\r\n      output: {\r\n        type: 'data',\r\n        name: 'flod:Context',\r\n        data: '',\r\n        tags: ['keep']\r\n      }\r\n    }\r\n  }\r\n  return {}\r\n}"
    active: true
  - name: '@api'
    kind: 'nodejs:10'
    code: |-
      const advisor = require('./lenovo-client')
      const {Result} = require('eba')
      module.exports.main = async (params) => {
        const command = params.input.command
        console.log('@api endpoint command - ' + command)
        
        const response = await advisor.getAdvisorResponse(params.secrets, params.storage, null, command)
        return new Result(response)
      }
  - name: '@annotate'
    kind: 'nodejs:10'
    code: |-
      const advisor = require('./lenovo-client.js')
      const eba     = require('eba')
      const _       = require('lodash')

      module.exports.main = async (params) => {
        const question = params.input.text
        
        console.log("Question for annotation service:", question)
        
        const {entityValues} = await advisor.getEntities(params.secrets, params.storage, null, question)
        const sortedTokens = _(eba.flattenTree(params.input.tokens)).map('token').sortBy('id').value()

        const getMatches = (start, end) => {
          var response = []
          for (i = 0; i < entityValues.length; i++) {
            var entity = entityValues[i];
            var firstTokenIndex = -1;
            var lastTokenIndex = -1;
            for (j = 0; j < sortedTokens.length; j++) {
              const token = sortedTokens[j];
              if (token.start === entity.spans[0][0] && entity.spans[0][0] <= start)
                firstTokenIndex = j
              if ((token.start + token.length ) === entity.spans[0][1] && entity.spans[0][1] >= end)
                lastTokenIndex = j
            }
            if (firstTokenIndex > -1 && lastTokenIndex > -1) {
              response.push(entity) 
            }
          }
          return response
        }

        const namedEntityTree = eba.mapTree(params.input.tokens, (tt) => {
          const start = tt.token.start
          const end   = start + tt.token.length
          const matches = getMatches(start, end)
          _.forEach(matches, (match) => {
            const text = _.find(match.values, (value) =>  _.includes(_.toLower(value), _.toLower(tt.token.form)))
            const data = { code: match.code, text: text}
            tt = eba.insertAnnotation(tt, match.name, 1.0, data)
          })

          return tt
        })

        return new eba.Result(namedEntityTree)
      } 
  - name: '@start'
    kind: 'nodejs:10'
    code: |-
      const {Result} = require('eba')
      module.exports.main = (params) => {
        var channel = params.input.claims['cca:partner']
        var uniqueId = getUniqueId(params.input.claims, channel)
        var tenantId = getTenantId(params.input.claims, channel)
        
        console.log('Unique Id - ' +uniqueId)
        console.log('Tenant id - ' + tenantId)
        console.log('Channel - ' + channel)
        return new Result().store('uniqueId', uniqueId).store('tenantId', tenantId).store('channel', channel).store('agentName', params.agent)
      }

      const getTenantId = (claims, channel) => {
          if (channel == 'Workspace') {
              return claims['sci:tenant']['_id']
          } else if (channel == 'CUI') {
              return claims['sci:tenant']['_id']
          }
      }

      const getUniqueId = (claims, channel) => {
          if (channel == 'Workspace') {
              return claims["wws:ibmUniqueID"]
          } else if (channel == 'CUI') {
              return claims["sub"]
          }
      }
  - name: '@fallback'
    kind: 'nodejs:10'
    code: |-
      const _ = require('lodash')
      const util = require('util')
      const DiscoveryV1 = require('watson-developer-cloud/discovery/v1')

      module.exports.main = async (params) => {
        const question = params.input['@question']
        const discovery = new DiscoveryV1({
          url: params.secrets.url,
          version: '2019-03-25',
          iam_apikey: params.secrets.apikey
        })
        
        const returnDocument = (document) => {
          return {
            output: {
              name: 'lns:StaticDocumentation',
              type: 'data',
              tags: ['fallback'],
              data: {
                name: 'lns:Document',
                data: document,
                text: 'The following resuts might be relevant to your question.'
              }
            }
          }
        }
        
        const returnDefault = () => {
          return {
              output: {
                name: 'lns:StaticDocumentation',
                type: 'data',
                tags: ['fallback'],
                data: {
                  name: 'lns:DefaultHelpLink',
                  data: [],
                  text: 'I could not understand your question. You can visit the link below for general help.'
                }
              }
            }
        }
        
        return await discovery
          .query({
            environment_id: params.secrets.enviornment,
            collection_id: params.secrets.collection,
            natural_language_query: question
          })
          .then((response) => {
            return !_.isEmpty(response.results)
              ? returnDocument(response)
              : returnDefault()
          })
      }
    active: true
statics:
  - name: manufacturingOrders.coffee
    mime: application/vnd.coffeescript
    text: |-
      {flod_EntityData} = require('./flod.coffee')

      export class flod_ManufacturingOrdersData extends flod_EntityData
        constructor: (props) ->
          super(props)
          @state = { showSummary: true, showDownload: false, showAttachments: true, showTable: false }
        
        renderTable: (data) =>
          React.createElement Table,
            title: R.h2 null, "Manufacturing Orders"
            items: @props.data.data
            config:
              "id":
                visible: true
              "customer":
                visible: true
              "product":
                visible: true
              "numberOfUnits":
                visible: true
              "operation":
                visible: false
            columns: [
              ["MO", "id", (moId) ->
                R.span null,
                  R.a
                    href: "#"
                    onClick: (e) =>
                      e.preventDefault()
                      bridge.trigger "ask", 'Show me status of manufacturing order ' + moId
                    moId
              ]
              ["Customer", "customer"]
              ["Product", "product"]
              ["Unit count", "numberOfUnits"]
              ["Operation", "operation"]
            ]
            configKey: "lenovo_ManufacturingOrdersData"

      export class flod_ManufacturingOrdersContent extends PureComponent
        render: ->
          if (@props.data.data != null)
            React.createElement Table,
              title: R.h2 null, "Manufacturing Orders"
              items: @props.data.data
              columns: [
                ["MO", "id", (moId) ->
                  R.span null,
                    R.a
                      href: "#"
                      onClick: (e) =>
                        e.preventDefault()
                        bridge.trigger "ask", 'Show me status of manufacturing order ' + moId
                      moId
                ]
                ["Customer", "customer"]
                ["Product", "product"]
                ["Unit Count", "numberOfUnits"]
                ["Operation", "operation"]
              ]
          else
            return null
    active: true
    frontend: true
  - name: flod.coffee
    mime: application/vnd.coffeescript
    text: |-
      export class flod_EntityData extends PureComponent
        constructor: (props) ->
          super props
          @state = { showSummary: true, showDownload: false, showAttachments: true, showTable: false }
        
        toArrayBuffer: (base64) =>
          buffer = new ArrayBuffer(base64.length)
          view = new Uint8Array(buffer)
          _.forEach base64, (data, index) =>
            view[index] = base64.charCodeAt(index) & 0xFF;
          buffer

        download: (attachment, name) =>
          arrayBuffer = @toArrayBuffer(atob(attachment))
          if (name.endsWith('csv'))
            blob = new Blob([arrayBuffer], {type: 'text/csv;'})
          else if (name.endsWith('xlsx'))
            blob = new Blob([arrayBuffer], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;'})
          saveAs(blob, name)
        
        collapseSection: (e, section) ->
          e.preventDefault()
          if section == "summary"
            @setState {showSummary:!@state.showSummary}
          else if section == "attachments"
            @setState {showAttachments:!@state.showAttachments}
          else if section == "table"
            @setState {showTable:!@state.showTable}
        
        renderContent: (content) ->
          if content?
            text = content
            if _.includes(content, "Complete list")
              text = _.get(_.split(content, "Complete list"), 0)
            React.createElement Markdown, {text}

        renderTable: (data) ->
          R.div 

        renderAttachments: (attachments) ->
          render = (items, search) =>
            R.ul null,
              _.map items, ({content, filename}) =>
                R.li key: filename,
                  R.div 
                    className: "file-container"
                    onMouseOver: (e) => @setState showDownload:true
                    onMouseOut: (e) => @setState showDownload:false
                    R.div 
                      className: "icon-container"
                      onClick: (e) =>
                        e.preventDefault()
                        e.stopPropagation()
                        @download(content, filename)
                      R.button className: "btn btn-link",
                        if filename.endsWith('csv') then R.span className:"glyphicon glyphicon-file-csv" else R.span className:"glyphicon glyphicon-file-excel"
                    R.div className: "name-container",
                      R.p null, filename
                    
          if attachments?
            React.createElement List,
              items: attachments
              renderList: render
        render: =>
          rootClass = if !@state.showAttachments then "root-container" else null
          R.div className: rootClass,
            if @props.data.attachments != null || @props.data.data != null
              R.div className: "summary-header",
                R.a 
                  style: paddingBottom: 10
                  className: "entity-section-header arrow-right"
                  onClick: (e) => @collapseSection(e, "summary")
                  "Summary"
                R.button className: "btn btn-link summary-btn",
                  if (@state.showSummary)
                    R.span 
                      className: "glyphicon glyphicon-chevron-down"
                      onClick: (e) => @collapseSection(e, "summary")
                  else
                    R.span 
                      className: "glyphicon glyphicon-chevron-up"
                      onClick: (e) => @collapseSection(e, "summary")
            if @state.showSummary
              R.div className:"section-container",
                @renderContent(@props.data.content)
              
            if @props.data.attachments != null
              R.div className: "attachments-header",
                R.p null
                R.a 
                  className: "entity-section-header"
                  onClick: (e) => @collapseSection(e, "attachments")
                  "Attachments"
                R.button className: "btn btn-link attachments-btn",
                  if (@state.showAttachments)
                    R.span
                      className: "glyphicon glyphicon-chevron-down"
                      onClick: (e) => @collapseSection(e, "attachments")
                  else
                    R.span 
                      className: "glyphicon glyphicon-chevron-up"
                      onClick: (e) => @collapseSection(e, "attachments")
            if @state.showAttachments && @props.data.attachments != null
              R.div className: 'section-container',
                @renderAttachments(@props.data.attachments)
                
            if @props.data.data != null
              R.div className: "table-header",
                R.p null
                R.a 
                  className: "entity-section-header"
                  onClick: (e) => @collapseSection(e, "table")
                  "Data"
                R.button className: "btn btn-link table-btn",
                  if (@state.showTable)
                    R.span
                      className: "glyphicon glyphicon-chevron-down"
                      onClick: (e) => @collapseSection(e, "table")
                  else
                    R.span 
                      className: "glyphicon glyphicon-chevron-up"
                      onClick: (e) => @collapseSection(e, "table")

            if @props.data.data != null && @state.showTable
              R.div className: 'section-container',
                @renderTable()
            else if @props.data.data != null
              R.div className: 'section-container'
              
      ### 
        code below makes all entities to reuse the visualizer above,
       this is done by modifying global window objects visualizer keys, e.g.
       lenovo_SalesOrdersData -> lenovo_EntityData which runs the stateless visualizer above
      ###
      lenovoEntities = [
        'SalesOrders',
        'Status',
        'Inventory',
        'SubstituteParts',
        'Health',
        'Units',
        'ManufacturingLoad',
        'ASNReport',
        'ASNReports',
        'AdvisorUsage'
      ]

      # point all visualizers to common entity visualizer above
      _.forEach lenovoEntities, (entity) => 
        window["flod_#{entity}Data"] = flod_EntityData
    frontend: true
  - name: flod.css
    mime: text/css
    text: |-
      .name-container {
        float: left;
        width: 50%;
        padding: 10px;
        padding-left: 0px;
      }


      .download-container {
        float: right;
        width: 15%;
        padding: 10px;
        padding-top:6px;
      }

      .file-container {
        display: block;
        float: left;
        border: 1px solid;
        border-color: #ECECEC;
        margin-bottom: 12px;
        border-radius: 6px;
        width: 100%;
        height: 40px;
      }


      .icon-container {
        float: left;
        width: 15%;
        padding: 10px;
        padding-top: 6px;
      }

      .glyphicon-file-excel {
        font-size: 20px;
      }

      .glyphicon-import {
        font-size: 12px;
      }

      .entity-section-header {
        font-size: 15px;
        display: block;
      }

      .summary-header {
        display:block;
      }

      .summary-header a {
        float:left;
      }

      .attachments-header {
        display:block;
        clear:left;
      }

      .attachments-header a {
        float:left;
      }

      .table-header {
        display:block;
        clear:left;
      }

      .table-header a {
        float:left;
      }

      .glyphicon-chevron-down {
        float: left;
        font-size: 10px;
      }

      .glyphicon-chevron-up {
        float: left;
        font-size: 10px;
      }

      .summary-btn {
        float: right;
      }

      .attachments-btn {
        float:right;
      }

      .table-btn {
        float:right;
      }

      .root-container {
        padding-bottom: 20px;
      }

      .section-container {
        display: inline-block;
        width:100%;
      }
    frontend: true
  - name: lenovo-client.js
    mime: text/javascript
    text: >-
      const request = require('request-promise-native')

      const _ = require('lodash')


      const getAdvisorResponse = async (secrets, storage, question, command) =>
      {
        console.log(`question: ${question}`)
        console.log(`command: ${command}`)
        const {customAdvisorUrl, clientSecret, uniqueId, tenantId} = secrets
        const {channel} = storage
        const options = {
          method: 'POST',
          uri: customAdvisorUrl + '/eba/message',
          body: {
            originalMessage : question,
            processCommand : command,
            uniqueId: uniqueId,
            tenantId: tenantId,
          },
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'X-IBM-Client-Secret': clientSecret
          },
          json: true
        }
        const res = await request(options)
        console.log(JSON.stringify(res))
        return res
      }


      const getEntities = async (secrets, storage, tokens, question) => {
        const {customAdvisorUrl, clientSecret, uniqueId, tenantId} = secrets
        const options = {
          method: 'POST',
          uri: customAdvisorUrl + '/eba/entities',
          body: {
            uniqueId: uniqueId,
            tenantId: tenantId,
            tokens : tokens,
            question: question
          },
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'X-IBM-Client-Secret':clientSecret
          },
          json: true
        }
        const res = await request(options)
        return res
      }




      const createCommand = (props, type) => {
        
        /* inner functions, used only incommand creation scrop */
        const hasProps = (reqs, source) => {
          return _.every(reqs, _.partial(_.has, source))
        }
        
        const assignParams = (params) => {
          return (!_.isEmpty(params)) ? `(${_(params).toPairs().map(xs => `${xs[0]}:"${xs[1]}"`).join(', ')})` : _.stubString()
        }
        
        const createManufactureCommand = (props) => {
          console.log(`command props: ${JSON.stringify(props)}`)
          console.log(`hasProps aged: ${hasProps(['aged'], props)}`)
          if (hasProps(['lateStart'], props)) {
            return `proc_manufacture_late_start_operation${assignParams(_.omit(props, ['lateStart']))}`
          } else if (hasProps(['aged'], props)) {
            return `proc_aged_manufacture_order${assignParams(_.omit(props, ['aged']))}`
          } else if(hasProps(['late'], props)) {
            return `proc_late_manufacture_order_based_on_sla${assignParams(_.omit(props, ['aged']))}`
          } else if(hasProps(['operation'], props)) {
            return `proc_find_manufacture_order_by_operation${assignParams(props)}`
          } else {
            console.log('else')
            return `proc_list_manufacture_order${assignParams(props)}`
          }
        }
        
        /* immediately invoked type dictionary which outputs op code */
        return {
          'manufacture': createManufactureCommand
        }[type](props)
      }


      const getReferenceType = (segment) => {
        if (segment === 'lenovo:CustomerSegment') 
          return 'Customer'
        else if (segment === 'lenovo:MonthSegment')
          return 'Month'
        else if (segment === 'lenovo:WeekSegment')
          return 'Week'
        else
          return null;
      }


      // exports

      module.exports.getAdvisorResponse   = getAdvisorResponse

      module.exports.createCommand        = createCommand

      module.exports.getEntities          = getEntities

      module.exports.getReferenceType     = getReferenceType
    backend: true
  - name: utils.js
    mime: text/javascript
    text: |-
      const _ = require('lodash')
      /* extends concept's lazy data wrapper with new props */
      const extendLazyData = (helper, lazyData, props) => {
        const lazyDataExtension = _.extend(_.get(lazyData, 'source.source'), props)
        return helper.makeLazyData(lazyDataExtension)
      }
      /* removes milliseconds from ISO string but preserves 'Z' */
      const formatDate = (timeframe) => {
        return new Date(timeframe).toISOString().split('.')[0] + 'Z'
      } 
      module.exports.extendLazyData = extendLazyData
      module.exports.formatDate = formatDate
    backend: true
  - name: lns-viz.coffee
    mime: application/vnd.coffeescript
    text: |-
      export class lns_DefaultHelpLinkData extends PureComponent
        constructor: (props) ->
          super props
          
        render: ->
          R.a null, "https://lenovopub.jiveon.com/"


      export class lns_DocumentData extends PureComponent
        constructor: (props) ->
          super props
          @state = {}

        parseDocument = ({content, url}, e) ->
            if _.isEmpty(content)
              content = e
            else
              url = url + e
            {content, url}

        @getDerivedStateFromProps: (nextProps, prevState) ->
          urlRegex = /(http:\/\/|https:\/\/)([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?/
          document = _.chain(nextProps.data)
            .get('results.[0].answer')
            .trimStart("no title ")
            .split(urlRegex)
            .reduce(parseDocument, {content: "", url: ""})
            .value()
          {document}

        render: ->
          console.log "lns_DocumentData"
          console.log { data: @props.data }
          R.div null,
            @state.document.content
            if !_.isEmpty(@state.document.url)
              R.a
                href:@state.document.url
                target: "_blank"
                @state.document.url
    active: true
    frontend: true
onlineHelp:
  - priority: -1
    title: Lenovo
    sections:
      - title: First Line of Defense Questions
        description: |
          Supply Chain Visibility Related Questions. 
            - Questions for our sales, client and business partner organizations to ask to gain insight and visibility into their customer orders.
            - Dynamic insight and answers from the tool to get current update and status' of orders.
            
        examples:
          - What is a pick and pack and when is it used?
          - What is the assembly process in MFG?
          - What is a Ship Support and the dependencies to implement it?
          - What does it mean that an item/part is book and chase?
          - >-
            What is the difference between BA/FOM/FOE and the impact of each
            one?
          - >-
            When an order drop thru the systems, when is the latest they can be
            cancelled?
          - What is the wip meaning in MFG?
          - How is demand related to production?
          - How can I assure that another order does not take my order supply?
          - What are the reasons for shorts or de-commits?
          - What is an offload and when is it needed?
          - How can I know if a SW is Physical or virtual?
          - What does it mean to have a "bottleneck" in MFG?
          - What is a MFG So order?
          - >-
            What are the differences between to pull in or to push out an order
            commit?
          - Where is te dock in the plant?
          - FG Meaning?
          - Differences between Production lead time and testing cycle time?
